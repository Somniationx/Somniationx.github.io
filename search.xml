<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『C语言入门』分支和循环语句</title>
      <link href="/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>在编程中，我们需要让程序<strong>根据不同情况作出选择，并重复执行某些任务</strong>。C语言的分支和循环结构为实现这些目标提供了强大的工具。本文将探索C语言中的分支（如<code>if</code>和<code>switch</code>）以及循环（如<code>while</code>、<code>for</code>和<code>do...while</code>）结构，帮助你理解如何更有效地控制程序的流程和逻辑。无论你是初学者还是有经验的开发者，这些知识都将为你的编程旅程增添价值。</p></blockquote><h1 id="一、什么是语句？"><a href="#一、什么是语句？" class="headerlink" title="一、什么是语句？"></a>一、什么是语句？</h1><blockquote><p>在编程中，语句是构成程序的基本元素之一，它们<strong>代表了计算机需要执行的指令或操作</strong>。语句是程序中的操作单位，通过组合不同类型的语句，我们可以构建出复杂的程序逻辑和功能。在C语言中，语句可以分为多种类型，包括<strong>表达式语句</strong>、<strong>赋值语句</strong>、<strong>条件语句</strong>等，每种类型都有其特定的作用和用法。</p></blockquote><p><strong>让我们来看一些常见的C语言语句示例，以便更好地理解语句的概念：</strong></p><h2 id="1-1表达式语句"><a href="#1-1表达式语句" class="headerlink" title="1.1表达式语句"></a>1.1表达式语句</h2><blockquote><p>表达式是由运算符、操作数和函数调用组成的计算式，表达式语句通常用于执行一些计算操作，但它的结果通常不会被使用。</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = y + z;    <span class="comment">// 赋值表达式</span></span><br><span class="line">result = a * b + c;    <span class="comment">// 数学表达式</span></span><br></pre></td></tr></table></figure><h2 id="1-2赋值语句"><a href="#1-2赋值语句" class="headerlink" title="1.2赋值语句"></a>1.2赋值语句</h2><blockquote><p>赋值语句用于将一个值赋给变量，从而更新变量的内容。这在程序中经常用于存储数据和计算结果。</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span>;    <span class="comment">// 将值10赋给变量num</span></span><br><span class="line">total = total + price;    <span class="comment">// 将total和price的和赋给total</span></span><br></pre></td></tr></table></figure><h2 id="1-3函数调用语句"><a href="#1-3函数调用语句" class="headerlink" title="1.3函数调用语句"></a>1.3函数调用语句</h2><blockquote><p>函数是一段预定义的代码块，通过函数调用语句，我们可以执行函数内的操作。函数调用语句通常用于完成特定的任务，例如输入输出、数学计算等。</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, world!&quot;</span>);    <span class="comment">// 调用printf函数输出文本</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value);    <span class="comment">// 调用scanf函数读取用户输入的整数</span></span><br></pre></td></tr></table></figure><h2 id="1-4复合语句"><a href="#1-4复合语句" class="headerlink" title="1.4复合语句"></a>1.4复合语句</h2><blockquote><p>复合语句是一组由花括号（<code>&#123;&#125;</code>）括起来的语句，它们被视为一个单元。复合语句可以包含多种类型的语句，用于组织和控制代码的执行。</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of x is %d\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5空语句"><a href="#1-5空语句" class="headerlink" title="1.5空语句"></a>1.5空语句</h2><blockquote><p>空语句是指不包含任何操作的语句，它通常用于语法要求需要一条语句但不需要实际操作的情况。空语句只包含一个分号。</p></blockquote><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;    <span class="comment">// 空语句</span></span><br></pre></td></tr></table></figure><h2 id="1-6控制语句"><a href="#1-6控制语句" class="headerlink" title="1.6控制语句"></a>1.6控制语句</h2><blockquote><p>控制语句是编程中的关键工具，用于管理程序的执行流程和实现不同的程序结构。在C语言中，控制语句分为三类：</p></blockquote><ol><li><strong>条件判断语句（分支语句）</strong>：这类语句允许根据不同的条件选择不同的执行路径。其中包括：<ul><li><strong>if语句</strong>：根据条件执行代码块，可以包含一个<code>else</code>块，用于处理条件不满足的情况。</li><li><strong>switch语句</strong>：基于表达式的值跳转到不同的<code>case</code>分支，可以实现多条件的选择。</li></ul></li><li><strong>循环执行语句</strong>：这类语句允许反复执行一段代码，直到满足特定条件为止。包括：<ul><li><strong>do while语句</strong>：先执行一次代码块，然后根据条件反复执行。</li><li><strong>while语句</strong>：在循环开始之前判断条件是否满足，满足则执行循环体内代码。</li><li><strong>for语句</strong>：在循环开始之前初始化计数器，根据条件和更新规则反复执行代码块。</li></ul></li><li><strong>转向语句</strong>：这类语句用于控制程序的跳转。包括：<ul><li><strong>break语句</strong>：在循环或switch语句中提前终止循环或跳出switch。</li><li><strong>continue语句</strong>：跳过当前循环迭代的剩余部分，进入下一次迭代。</li><li><strong>return语句</strong>：从函数中返回值，并终止函数的执行。</li><li><strong>goto语句</strong>：尽管不推荐使用，但可以无条件地跳转到代码中的标签位置。</li></ul></li></ol><blockquote><p><strong>本文主要介绍控制语句。</strong></p><p>每个语句都以分号（<code>;</code>）结尾，表示语句的结束。在编写程序时，正确使用分号是非常重要的，因为<strong>它们告诉编译器何时一个语句结束，何时开始下一个语句。</strong></p></blockquote><h1 id="二、分支语句"><a href="#二、分支语句" class="headerlink" title="二、分支语句"></a>二、分支语句</h1><blockquote><p>分支语句是C语言中的重要控制结构之一，它允许程序根据不同的条件选择不同的执行路径。通过分支语句，你可以<strong>实现有条件的程序执行，从而使程序更具智能和灵活性</strong>。C语言中的分支语句主要包括<code>if</code>语句和<code>switch</code>语句。</p></blockquote><h2 id="2-1-if语句"><a href="#2-1-if语句" class="headerlink" title="2.1 if语句"></a>2.1 <code>if</code>语句</h2><blockquote><p>在C语言中，<code>if</code>语句是一种重要的<strong>条件判断语句</strong>，它允许根据条件的<strong>真假</strong>执行不同的代码块，从而实现有条件的程序执行。<code>if</code>语句的灵活性使得我们可以根据不同的情况选择不同的程序路径，使程序更加智能和逻辑清晰。</p></blockquote><h3 id="2-1-1基本语法"><a href="#2-1-1基本语法" class="headerlink" title="2.1.1基本语法"></a>2.1.1基本语法</h3><p><code>if</code>语句的基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 如果条件为真，执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>条件</code>是一个布尔表达式或可求值为布尔值的表达式。如果条件的值为真（非零），则执行花括号内的代码块；如果条件的值为假（零），则跳过这个代码块，继续执行后续的代码。</li></ul><p>下面是一个简单的例子，演示了如何使用<code>if</code>语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter an integer: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is positive.\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Program finished.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，用户被要求输入一个整数。程序使用<code>if</code>语句检查输入的整数是否为正数。如果是正数（即条件<code>num &gt; 0</code>为真），则输出相应的信息；否则，直接跳过输出部分，继续执行后续代码。</p><h3 id="2-1-2使用else语句"><a href="#2-1-2使用else语句" class="headerlink" title="2.1.2使用else语句"></a>2.1.2使用<code>else</code>语句</h3><blockquote><p>除了基本的<code>if</code>语句外，你还可以使用<code>else</code>来指定在条件不满足时执行另一段代码块：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter an integer: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is positive.\n&quot;</span>, num);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is not positive.\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Program finished.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，根据用户输入的整数，程序会输出相应的信息，要么是正数，要么是不是正数。<code>else</code>语句使你能够在两个不同的可能性之间做出选择。</p><h3 id="2-1-3嵌套if语句"><a href="#2-1-3嵌套if语句" class="headerlink" title="2.1.3嵌套if语句"></a>2.1.3嵌套if语句</h3><blockquote><p>你还可以在一个<code>if</code>语句内嵌套另一个<code>if</code>语句，以处理更复杂的条件情况：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter an integer: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is positive.\n&quot;</span>, num);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is negative.\n&quot;</span>, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is zero.\n&quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Program finished.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，根据用户输入的整数，程序会输出<strong>正数、负数或零</strong>的信息。这利用了嵌套的<code>if</code>语句来处理不同的情况。</p><h3 id="2-1-4多层if-else语句"><a href="#2-1-4多层if-else语句" class="headerlink" title="2.1.4多层if-else语句"></a>2.1.4多层<code>if-else</code>语句</h3><blockquote><p>在实际编程中，经常会遇到需要同时判断<strong>多个条件</strong>的情况。为了处理这样的复杂情况，你可以使用<strong>多层</strong>的<code>if-else</code>语句来实现不同条件下的不同操作。多层<code>if-else</code>语句能够有效地组合和嵌套条件判断，以处理多重条件。</p></blockquote><p>多层<code>if-else</code>语句的基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件1为真时执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件2为真时执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件3为真时执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 所有条件均不满足时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这种结构允许你根据多个条件逐个判断，直到找到第一个满足条件的分支，然后执行相应的代码块。</strong>如果所有条件都不满足，最后的<code>else</code>代码块将会执行。</p><p>以下示例展示了多层<code>if-else</code>语句的使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter your score: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Grade: A\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Grade: B\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Grade: C\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Grade: D\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Grade: F\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，根据用户输入的分数，程序使用多层<code>if-else</code>语句来判断其所在的分数段，并输出相应的等级。根据分数的不同，程序会在不同的条件分支中选择执行。</p><blockquote><p>多层<code>if-else</code>语句能够清晰地表达多重条件判断的逻辑，使得程序结构更加直观和易于理解。当你需要处理多个条件时，将多个<code>if-else</code>分支组合在一起，可以有效地构建复杂的程序逻辑。</p><p><code>if</code>语句是实现有条件的程序执行的重要工具。无论是输入验证还是多重条件判断，合理地使用不同形式的<code>if</code>语句，都可以使程序的逻辑更加清晰和智能。</p></blockquote><h2 id="2-2-switch语句"><a href="#2-2-switch语句" class="headerlink" title="2.2 switch语句"></a>2.2 <code>switch</code>语句</h2><blockquote><p>在C语言中，<code>switch</code>语句是一种用于多重条件选择的控制语句。它允许根据表达式的值在多个<code>case</code>分支中选择执行不同的代码块。<code>switch</code>语句可以使程序更加简洁和易于理解，特别是当需要处理多个固定值时。</p></blockquote><h3 id="2-2-1基本语法"><a href="#2-2-1基本语法" class="headerlink" title="2.2.1基本语法"></a>2.2.1基本语法</h3><p><code>switch</code>语句的基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 当表达式的值等于值1时，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 当表达式的值等于值2时，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 更多case...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 如果表达式的值不匹配任何case时，执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>表达式</code>是一个可求值的表达式，其值将与每个<code>case</code>标签进行比较。</li><li>每个<code>case</code>标签后跟着一个需要匹配的值和一个冒号。</li><li>如果<code>表达式</code>的值与某个<code>case</code>标签匹配，则会执行该<code>case</code>标签下的代码块。在执行完代码块后，可以通过使用<code>break</code>语句跳出<code>switch</code>语句，以防止进一步执行其他<code>case</code>块。如果没有<code>break</code>语句，程序将会继续执行下一个<code>case</code>。</li></ul><h3 id="2-2-2示例"><a href="#2-2-2示例" class="headerlink" title="2.2.2示例"></a>2.2.2示例</h3><p>考虑以下示例，演示了如何使用<code>switch</code>语句处理不同运算符对应的操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> operator;</span><br><span class="line">    <span class="type">double</span> num1, num2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter an operator (+, -, *, /): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;operator);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter two numbers: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;num1, &amp;num2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf + %.2lf = %.2lf\n&quot;</span>, num1, num2, num1 + num2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf - %.2lf = %.2lf\n&quot;</span>, num1, num2, num1 - num2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf * %.2lf = %.2lf\n&quot;</span>, num1, num2, num1 * num2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (num2 != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.2lf / %.2lf = %.2lf\n&quot;</span>, num1, num2, num1 / num2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Error: Division by zero.\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Invalid operator.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，用户首先被要求输入一个运算符，然后输入两个数字。程序使用<code>switch</code>语句根据运算符选择执行不同的计算，并输出结果。根据运算符的不同，程序会选择执行相应的<code>case</code>分支。</p><blockquote><p><code>switch</code>语句适用于当你需要根据多个固定选项来决定执行哪一段代码时。使用<code>switch</code>语句可以使代码结构更加整洁和易于维护。不过需要注意，在每个<code>case</code>分支中使用<code>break</code>语句来避免不必要的<strong>穿透</strong>。</p></blockquote><h3 id="2-2-3穿透"><a href="#2-2-3穿透" class="headerlink" title="2.2.3穿透"></a>2.2.3穿透</h3><blockquote><p>在C语言的<code>switch</code>语句中，如果在一个<code>case</code>分支中没有使用<code>break</code>语句，那么程序将会“穿透”到下一个<code>case</code>分支中继续执行，而不会跳过后续的<code>case</code>。这种现象被称为“穿透”或“fall-through”。</p></blockquote><p>考虑以下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number between 1 and 3: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;You chose 1.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;You chose 2.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;You chose 3.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，如果用户输入的数字是1，程序会输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You chose <span class="number">1.</span></span><br><span class="line">You chose <span class="number">2.</span></span><br><span class="line">You chose <span class="number">3.</span></span><br><span class="line">Invalid choice.</span><br></pre></td></tr></table></figure><p>这是因为在<code>case 1</code>的代码块中没有使用<code>break</code>语句，所以程序继续执行下一个<code>case</code>，以及后续的所有代码块，直到<code>switch</code>语句结束或遇到<code>break</code>为止。这就导致了穿透现象。</p><blockquote><p><strong>为了避免意外的穿透</strong>，通常在每个<code>case</code>分支的代码块末尾使用<code>break</code>语句。如果希望每个分支都执行独立的逻辑且不会穿透到其他分支，<code>break</code>语句是必要的。如果需要有意的穿透，可以有选择地省略<code>break</code>，但在这种情况下，需要特别小心以确保代码的预期行为。</p></blockquote><h1 id="三、循环语句"><a href="#三、循环语句" class="headerlink" title="三、循环语句"></a>三、循环语句</h1><blockquote><p>在学习编程的旅程中，掌握循环语句是至关重要的一步。C语言作为一门广泛应用的编程语言，提供了多种循环语句，用于处理重复性任务。本章节将帮助您逐步了解<code>for</code>、<code>while</code>和<code>do-while</code>三种循环，为您的学习之路提供详细的指导。</p></blockquote><h2 id="3-1for循环"><a href="#3-1for循环" class="headerlink" title="3.1for循环"></a>3.1<code>for</code>循环</h2><p><code>for</code>循环通常用于在已知的次数范围内重复执行代码。它由三个关键部分组成：</p><ul><li>初始化：在循环开始前执行的语句，通常用于初始化计数器。</li><li>条件：在每次循环迭代前检查的条件，如果条件为真，循环将继续执行。</li><li>更新：在每次循环迭代后执行的语句，通常用于递增或递减计数器。</li></ul><p><strong>示例：</strong> 让我们使用<code>for</code>循环输出前10个自然数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1break和continue"><a href="#3-1-1break和continue" class="headerlink" title="3.1.1break和continue"></a>3.1.1<code>break</code>和<code>continue</code></h3><blockquote><p>当在C语言的<code>for</code>循环中使用<code>break</code>和<code>continue</code>语句时，它们分别用于控制循环的中断和跳过。</p></blockquote><p><strong><code>break</code>语句</strong> </p><blockquote><p><code>break</code>语句用于在循环内部中断循环的执行，无论循环条件是否满足。一旦<code>break</code>语句执行，循环将立即终止，程序将继续执行循环之后的代码。</p></blockquote><p><strong>示例：</strong> 使用<code>break</code>语句在<code>for</code>循环中找到第一个满足条件的数字并终止循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到满足条件的数字：%d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 循环中断</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>continue</code>语句</strong></p><blockquote><p><code>continue</code>语句用于跳过当前循环迭代的剩余部分，并继续下一次迭代。它将不执行当前迭代中<code>continue</code>语句后面的代码，而是直接进入下一次循环迭代。</p></blockquote><p><strong>示例：</strong> 使用<code>continue</code>语句跳过某些特定数字的输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;  <span class="comment">// 跳过偶数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用这些语句时，要注意它们的影响范围。<code>break</code>会立即中断循环，并退出循环体，而<code>continue</code>只是跳过当前迭代的剩余部分，然后继续下一次迭代。使用这些语句可以更灵活地控制循环的行为，使代码逻辑更加清晰和可读。</p><blockquote><p>总之，<code>break</code>用于完全中断循环，而<code>continue</code>用于跳过当前迭代。这两个关键字在不同情况下能够帮助您更好地处理循环中的逻辑。</p></blockquote><h3 id="3-1-2循环控制变量"><a href="#3-1-2循环控制变量" class="headerlink" title="3.1.2循环控制变量"></a>3.1.2循环控制变量</h3><p><strong>1. 不可在<code>for</code>循环体内修改循环变量，防止循环失去控制：</strong></p><blockquote><p>循环控制变量在<code>for</code>循环的初始化部分被定义，并在每次迭代后在更新部分进行更新。在循环体内修改循环控制变量可能会导致循环条件不再满足，从而导致循环行为出现问题，甚至导致无限循环。</p></blockquote><p><strong>示例：</strong> 错误的修改循环控制变量示例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        i--;  <span class="comment">// 错误：在循环体内修改循环控制变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 建议<code>for</code>语句的循环控制变量的取值采用“前闭后开区间”写法：</strong></p><blockquote><p>使用“前闭后开区间”写法可以避免循环条件边界值的问题，同时也使得循环的行为更加清晰和容易理解。</p></blockquote><p><strong>示例：</strong> 使用“前闭后开区间”写法的<code>for</code>循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从1到10（包括1，不包括10）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法中，循环变量<code>i</code>的值从1开始，在条件部分使用<code>&lt;</code>号，确保循环不会执行到10。</p><p><strong>3. 合理选择循环控制变量的命名：</strong></p><blockquote><p>循环控制变量的命名应该具有描述性，可以使代码更具可读性。通常，使用简洁而有意义的变量名能够使代码更清晰地传达循环的意图。</p></blockquote><p><strong>示例：</strong> 使用描述性变量名的<code>for</code>循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num_of_students = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> student_id = <span class="number">1</span>; student_id &lt;= num_of_students; student_id++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;处理学生 %d\n&quot;</span>, student_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，循环控制变量<code>student_id</code>能够清楚地表示正在处理的学生编号。</p><h3 id="3-1-3循环变种"><a href="#3-1-3循环变种" class="headerlink" title="3.1.3循环变种"></a>3.1.3循环变种</h3><blockquote><p>C语言的<code>for</code>循环可以有多种变种，可以根据不同的需求和场景来适应不同的情况。</p></blockquote><p>以下是一些常见的<code>for</code>循环变种示例：</p><p><strong>1. 倒序循环：</strong></p><blockquote><p>通常，<code>for</code>循环是从一个初始值递增到一个结束值，但您也可以将其用于倒序循环。这可以通过递减循环控制变量来实现。</p></blockquote><p><strong>示例：</strong> 使用<code>for</code>循环倒序输出10到1的数字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.无限循环：</strong></p><blockquote><p>有时候需要创建一个无限循环，可以在循环条件部分使用<code>true</code>或非零值来实现。</p></blockquote><p><strong>示例：</strong> 使用<code>for</code>循环创建无限循环，需要手动中断循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这是一个无限循环\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加适当的中断条件，如按下Ctrl+C</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.多变量循环：</strong></p><blockquote><p><code>for</code>循环可以在初始化部分同时初始化多个循环控制变量，并在更新部分对它们进行更新。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d * %d = %d\n&quot;</span>, i, j, i * j);</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; i) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这些是<code>for</code>循环的一些常见变种，但还有更多的变种方式，可以根据实际需求进行适当调整。<code>for</code>循环是非常灵活的，可以用于各种不同的循环场景。根据不同的情况，选择适当的循环变种能够使您的代码更加简洁、高效和可读。</p></blockquote><h2 id="3-2while循环"><a href="#3-2while循环" class="headerlink" title="3.2while循环"></a>3.2<code>while</code>循环</h2><blockquote><p>在C语言中，<code>while</code>循环是一种强大的循环结构，它允许您在条件为真的情况下重复执行一段代码。相比于<code>for</code>循环，<code>while</code>循环更加灵活，适用于需要根据条件来动态控制循环次数的场景。让我们深入了解<code>while</code>循环的语法、工作原理以及一些常见的用法。</p></blockquote><h3 id="3-2-1语法"><a href="#3-2-1语法" class="headerlink" title="3.2.1语法"></a>3.2.1语法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2工作原理"><a href="#3-2-2工作原理" class="headerlink" title="3.2.2工作原理"></a>3.2.2工作原理</h3><blockquote><p><code>while</code>循环会在每次循环开始之前，先判断条件是否为真。只要条件为真，循环体就会被执行。当循环体执行完毕后，会再次检查条件，然后决定是否继续下一次循环。如果条件为假，循环会终止，程序将继续执行循环之后的代码。</p></blockquote><p><strong>示例：</strong> 使用<code>while</code>循环计算用户输入数字的平方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number, square;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">        square = number * number;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数字 %d 的平方是 %d\n&quot;</span>, number, square);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环结束，感谢使用！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3常见用法"><a href="#3-2-3常见用法" class="headerlink" title="3.2.3常见用法"></a>3.2.3常见用法</h3><blockquote><ol><li><strong>处理用户输入：</strong> 使用<code>while</code>循环可以反复获取用户输入，直到满足特定条件。</li><li><strong>处理文件内容：</strong> 可以使用<code>while</code>循环逐行读取文件内容，直到文件结束。</li><li><strong>动态计算：</strong> 当循环次数无法提前确定时，可以使用<code>while</code>循环根据条件来动态计算循环次数。</li><li><strong>无限循环：</strong> 可以使用<code>while (1)</code>来创建无限循环，然后在适当条件下中断循环。</li><li><strong>游戏循环：</strong> 游戏开发中常用的游戏循环就是基于<code>while</code>循环的。</li></ol><p><code>while</code>循环的灵活性使它在许多编程场景中非常有用。不过，与其他循环一样，要小心避免造成无限循环，确保循环条件能够在某个时刻为假，从而终止循环。</p></blockquote><h3 id="3-2-4break语句与continue"><a href="#3-2-4break语句与continue" class="headerlink" title="3.2.4break语句与continue"></a>3.2.4<code>break</code>语句与<code>continue</code></h3><blockquote><p>在<code>while</code>循环中，同样可以使用<code>break</code>和<code>continue</code>语句来控制循环的流程。这些关键字在<code>while</code>循环中的作用与在其他循环类型中是类似的。</p></blockquote><ol><li><p><strong>break语句：</strong> </p><blockquote><p><code>break</code>语句用于在<code>while</code>循环内部立即终止循环的执行，无论循环条件是否为真。当<code>break</code>语句被执行时，循环会立即结束，程序将继续执行循环之后的代码。</p></blockquote><p><strong>示例：</strong> 使用<code>while</code>循环找到第一个满足条件的数字并终止循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (number &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到满足条件的数字：%d\n&quot;</span>, number);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 循环中断</span></span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>continue语句：</strong> </p><blockquote><p><code>continue</code>语句用于跳过当前循环迭代的剩余部分，直接进入下一次循环迭代。它会终止当前迭代的循环体部分，然后检查循环条件，决定是否继续下一次迭代。</p></blockquote><p><strong>示例：</strong> 使用<code>while</code>循环输出奇数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;  <span class="comment">// 跳过偶数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>break</code>和<code>continue</code>语句在<code>while</code>循环中的作用与在其他循环中的作用相同。它们可以在循环内部实现条件跳出和跳过的需求，帮助您更精确地控制循环的执行流程。但请确保在使用它们时，不会导致无限循环或跳过循环的重要部分。</p></blockquote><h2 id="3-3do-while循环"><a href="#3-3do-while循环" class="headerlink" title="3.3do-while循环"></a>3.3<code>do-while</code>循环</h2><blockquote><p><code>do-while</code>循环是C语言中的一种循环结构，它与<code>while</code>循环有些类似，但有一个重要区别：<code>do-while</code>循环会先执行一次循环体，然后在每次迭代结束后检查循环条件是否满足。让我们深入了解<code>do-while</code>循环的语法、工作原理以及一些常见的应用场景。</p></blockquote><h3 id="3-3-1语法"><a href="#3-3-1语法" class="headerlink" title="3.3.1语法"></a>3.3.1语法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><h3 id="3-3-2工作原理"><a href="#3-3-2工作原理" class="headerlink" title="3.3.2工作原理"></a>3.3.2工作原理</h3><blockquote><p><code>do-while</code>循环会首先执行一次循环体中的代码，然后检查循环条件是否为真。只要条件为真，循环会继续迭代，继续执行循环体，然后再次检查循环条件。如果条件为假，循环将终止，程序将继续执行循环之后的代码。</p></blockquote><p><strong>示例：</strong> 使用<code>do-while</code>循环获取用户输入，直到输入合法为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入一个正整数：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;number);</span><br><span class="line">    &#125; <span class="keyword">while</span> (number &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您输入的是：%d\n&quot;</span>, number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3常见用法"><a href="#3-3-3常见用法" class="headerlink" title="3.3.3常见用法"></a>3.3.3常见用法</h3><blockquote><ol><li><strong>用户输入验证：</strong> 使用<code>do-while</code>循环可以确保用户至少输入一次，并在每次迭代中验证输入的有效性。</li><li><strong>菜单选择：</strong> 在菜单选择等场景中，<code>do-while</code>循环可用于持续显示选项并等待用户选择，直到用户选择退出。</li><li><strong>处理用户反馈：</strong> 可以使用<code>do-while</code>循环获取用户反馈，然后根据反馈决定是否继续执行。</li><li><strong>模拟游戏轮次：</strong> 游戏中的回合制操作可以使用<code>do-while</code>循环来实现。</li></ol><p><code>do-while</code>循环确保循环体至少会被执行一次，适用于需要在循环前执行一些操作的情况。要注意，循环条件必须在循环体的结尾处，这确保了至少执行一次循环体。</p></blockquote><h3 id="3-3-4break语句与continue"><a href="#3-3-4break语句与continue" class="headerlink" title="3.3.4break语句与continue"></a>3.3.4<code>break</code>语句与<code>continue</code></h3><ol><li><p><strong>break语句</strong></p><blockquote><p> <code>break</code>语句用于在<code>do-while</code>循环内部立即终止循环的执行，无论循环条件是否为真。当<code>break</code>语句被执行时，循环会立即结束，程序将继续执行循环之后的代码。</p></blockquote><p><strong>示例：</strong> 使用<code>do-while</code>循环找到第一个满足条件的数字并终止循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到满足条件的数字：%d\n&quot;</span>, number);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 循环中断</span></span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (number &lt;= <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>continue语句</strong> </p><blockquote><p><code>continue</code>语句用于跳过当前循环迭代的剩余部分，直接进入下一次循环迭代。它会终止当前迭代的循环体部分，然后重新开始新的迭代。</p></blockquote><p><strong>示例：</strong> 使用<code>do-while</code>循环输出奇数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;  <span class="comment">// 跳过偶数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>break</code>和<code>continue</code>语句在<code>do-while</code>循环中的作用与在其他循环中的作用相同。它们都可以用于在循环内部实现条件跳出和跳过的需求，帮助您更灵活地控制循环的执行流程。确保在使用它们时，不会导致无限循环或跳过循环的重要部分。</p></blockquote><h2 id="3-4goto语句"><a href="#3-4goto语句" class="headerlink" title="3.4goto语句"></a>3.4<code>goto</code>语句</h2><blockquote><p><code>goto</code>语句是C语言中的一种跳转语句，它允许直接跳转到程序中的另一个标签（或标识符）位置。然而，值得注意的是，使用<code>goto</code>语句可能会导致代码变得难以理解和维护，因此在编程中应谨慎使用。</p></blockquote><h3 id="3-4-1基本语法"><a href="#3-4-1基本语法" class="headerlink" title="3.4.1基本语法"></a>3.4.1基本语法</h3><p>在C语言中，<code>goto</code>语句的基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">label:</span><br><span class="line"><span class="comment">// 代码段</span></span><br></pre></td></tr></table></figure><p>上述代码会将程序的控制流从<code>goto</code>语句跳转到标签<code>label</code>所在的位置</p><h3 id="3-4-2示例"><a href="#3-4-2示例" class="headerlink" title="3.4.2示例"></a>3.4.2示例</h3><blockquote><p>当涉及到<code>goto</code>语句的使用示例时，我们可以考虑一个简单的错误处理场景。假设我们正在编写一个函数，该函数从文件中读取数据，如果读取失败，则需要进行错误处理。</p></blockquote><p>以下是一个使用<code>goto</code>语句的简单示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to open the file.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件中的数据</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">    <span class="comment">// 错误处理逻辑</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;An error occurred.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，如果文件无法打开，程序将跳转到标签<code>error</code>处进行错误处理。这种情况下，<code>goto</code>语句可以帮助我们在错误发生时避免重复编写错误处理逻辑。</p><h3 id="3-4-3优点"><a href="#3-4-3优点" class="headerlink" title="3.4.3优点"></a>3.4.3优点</h3><p>尽管<code>goto</code>语句在现代编程实践中受到质疑，但它在某些特定情况下仍然可以提供帮助：</p><blockquote><ol><li><strong>错误处理：</strong> 在处理错误时，<code>goto</code>语句可以让您跳转到一个共享的错误处理代码块，以避免在每个错误检查点都重复编写相同的错误处理逻辑。</li><li><strong>复杂的跳转逻辑：</strong> 有时，一些算法或逻辑可能需要复杂的跳转路径，而<code>goto</code>可以使这些逻辑更清晰地表达。</li></ol></blockquote><h3 id="3-4-4缺点"><a href="#3-4-4缺点" class="headerlink" title="3.4.4缺点"></a>3.4.4缺点</h3><p>然而，<code>goto</code>语句的使用也带来了一些严重的问题：</p><blockquote><ol><li><strong>可读性差：</strong> 使用<code>goto</code>语句可能会导致代码变得难以理解。由于它允许在不同的位置之间跳转，程序的执行流程可能会变得令人困惑。</li><li><strong>维护困难：</strong> 当代码库变大并且多人协作时，使用<code>goto</code>语句可能会导致难以维护的代码。在不同的地方使用<code>goto</code>语句会使代码变得难以跟踪和调试。</li><li><strong>可能导致悬挂指针：</strong> 如果不小心使用<code>goto</code>语句，可能会导致指针悬挂，即指针指向了未初始化或已释放的内存区域。</li></ol></blockquote><h3 id="3-4-5替代方案"><a href="#3-4-5替代方案" class="headerlink" title="3.4.5替代方案"></a>3.4.5替代方案</h3><blockquote><p>尽管<code>goto</code>语句在一些情况下可能有用，但在现代编程中，通常更推荐使用结构化的控制流语句，如<code>if</code>、<code>while</code>、<code>for</code>等，来实现逻辑和控制流。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当涉及到控制流语句在C语言中的使用时，我们深入探讨了几种关键的语句：<code>for</code>循环、<code>switch</code>语句、<code>while</code>循环、<code>do-while</code>循环以及<code>goto</code>语句。每种语句都有其独特的优势和适用情况，但在实际编程中，我们需要根据具体情况来选择最适合的控制流结构。</p><blockquote><ul><li><code>for</code> 循环是在已知循环次数的情况下的首选。它的结构清晰，对于循环次数明确的情况下非常有用。</li><li><code>switch</code> 语句在多个选项中进行选择时非常有用。它可以将不同的情况映射到不同的代码块，使代码更具可读性。</li><li><code>while</code> 循环用于在条件为真的情况下重复执行代码。它适用于需要循环直到某个条件不满足的情况。</li><li><code>do-while</code> 循环与 <code>while</code> 循环类似，但它保证循环体至少被执行一次。这对于需要先执行循环体再进行条件检查的场景很有用。</li><li><code>goto</code> 语句是一种无条件跳转工具，尽管它可能在某些情况下有用，但在现代编程中通常应避免使用，以确保代码的可读性和维护性。</li></ul><p>正确选择适当的控制流结构是编写高质量代码的关键一步。无论是迭代次数已知还是需要进行多路分支选择，我们都应根据代码的逻辑和需求来选择合适的结构。同时，结构化的控制流语句有助于提高代码的可读性和维护性，从而促进更好的编程实践。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『C语言入门』初识C语言</title>
      <link href="/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/"/>
      <url>/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E5%88%9D%E8%AF%86C%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><strong>在这个数字化时代，计算机编程已经成为连接人类与技术的桥梁。</strong>而在编程的世界中，C语言犹如一座承载着无限可能性的基石。作为计算机编程的经典之选，C语言无疑是每个刚刚踏入编程领域的初学者的理想起点。本篇博客将带您踏上一段奇妙的C语言学习之旅，不仅会教您编写代码，更会启发您深入思考计算机科学的精髓。</p></blockquote><h1 id="C语言简介"><a href="#C语言简介" class="headerlink" title="C语言简介"></a><strong>C语言简介</strong></h1><blockquote><p>C语言是一门古老而强大的编程语言，<strong>诞生于20世纪70年代初</strong>。<strong>由丹尼斯·里奇（Dennis Ritchie）在贝尔实验室开发而成</strong>，C语言一经问世，立即在计算机科学领域引起轰动。其简洁、灵活和高效的特性，使其成为了许多编程任务的首选语言。</p></blockquote><p>C语言既具备高级编程语言的抽象特性，又直接暴露了底层的计算机硬件操作。这种特性使得C语言不仅适用于应用程序的开发，还可用于系统级编程和嵌入式系统的构建。实际上，许多操作系统和编译器本身就是用C语言编写的。🌟</p><p>C语言的<strong>语法简洁而灵活</strong>，<strong>允许程序员进行精细的控制和优化</strong>。它提供了丰富的数据类型，包括整数、浮点数、字符等，以及数组、结构体和指针等数据结构，使得程序员可以更好地管理和组织数据。此外，C语言也<strong>支持低级的内存操作</strong>，使得程序员可以直接操作计算机内存，从而实现高效的算法和数据结构。💡</p><p>尽管C语言在很多方面表现出色，但它也需要<strong>程序员自己负责管理内存</strong>，这可能会导致一些错误和挑战。然而，正是这些挑战培养了程序员的深刻理解和技能，使他们能够编写更加健壮和高性能的程序。</p><h1 id="一、Hello-World！"><a href="#一、Hello-World！" class="headerlink" title="一、Hello World！"></a>一、Hello World！</h1><blockquote><p>在学习任何编程语言时，第一个示例程序通常是经典的”Hello, World!”。它是一个简单的程序，可以帮助你了解基本的语法和程序结构。让我们一起来编写你的第一个C语言程序吧！</p></blockquote><h2 id="1-1-编写代码"><a href="#1-1-编写代码" class="headerlink" title="1.1 编写代码"></a>1.1 编写代码</h2><p>打开你选择的<strong>集成开发环境（IDE）</strong>或者<strong>文本编辑器</strong>，创建一个新的源代码文件，文件名可以是<code>hello.c</code>。然后在文件中输入以下代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    printf(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-代码解释"><a href="#1-2-代码解释" class="headerlink" title="1.2 代码解释"></a>1.2 代码解释</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这是一个<strong>预处理指令</strong>。预处理器会在编译代码<strong>之前</strong>执行，它告诉编译器引入了名为<code>stdio.h</code>的<strong>标准输入输出库</strong>。这个库包含了用于处理输入输出的函数，如<code>printf</code>。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main() &#123;</span><br></pre></td></tr></table></figure><blockquote><p>这是C语言<strong>程序的入口点</strong>。所有C程序都<strong>必须</strong>包含一个名为<code>main</code>的函数，<strong>它是程序的起始执行点</strong>。<code>int</code>表示<code>main</code>函数将返回一个整数值。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这行代码使用<strong><code>printf</code>函数</strong>打印文本到控制台。<code>printf</code>是C语言中用于<strong>格式化输出的函数</strong>。括号内的内容是你要输出的文本，<strong><code>\n</code>表示换行</strong>。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>return</code>语句</strong>用于指定函数的返回值。<strong>在<code>main</code>函数中</strong>，<strong>通常使用<code>return 0;</code>表示程序执行成功</strong>。其他非零值可能表示程序遇到了错误。</p></blockquote><p><strong>要理解代码的执行过程，你可以将程序想象成一系列的步骤：</strong></p><blockquote><ol><li>预处理器会处理<strong><code>#include &lt;stdio.h&gt;</code></strong>，并将<strong><code>stdio.h</code></strong>中的内容添加到程序中，以便在程序中使用标准输入输出函数。</li><li>当程序开始执行时，它会<strong>跳转</strong>到<code>main</code>函数。<strong><code>main</code>函数是程序的起始点</strong>。</li><li>在<strong><code>main</code></strong>函数中，<strong><code>printf(&quot;Hello, World!\n&quot;);</code></strong>语句会执行。<code>printf</code>函数会将指定的文本打印到控制台。</li><li><strong><code>return 0;</code>表示<code>main</code>函数执行成功</strong>，并返回整数值0，这表示程序<strong>正常终止</strong>。</li><li>整个程序执行完毕，控制台会显示出你的”Hello, World!”消息。</li></ol></blockquote><h2 id="1-3-编译和运行"><a href="#1-3-编译和运行" class="headerlink" title="1.3 编译和运行"></a>1.3 编译和运行</h2><p>保存文件后，你可以使用IDE中的<strong>编译和运行按钮</strong>，或者通过<strong>命令行</strong>运行以下命令来编译和运行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello hello.c</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><p><strong>第一条命令使用GCC编译器将<code>hello.c</code>源文件编译为可执行文件<code>hello</code>。第二条命令运行生成的可执行文件。</strong></p><h2 id="1-4-结果"><a href="#1-4-结果" class="headerlink" title="1.4 结果"></a>1.4 结果</h2><p>如果一切顺利，你应该能够在控制台看到输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p><strong>恭喜你，你已经成功编写并运行了你的第一个C语言程序！</strong>“Hello, World!”程序可能非常简单，但它为你提供了学习C语言的一个良好起点。在接下来的学习中，你将逐步了解更多复杂的语法和概念。</p><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><blockquote><p>当你开始学习编程语言时，了解数据类型至关重要，因为<strong>数据类型定义了变量可以存储的数据种类和范围</strong>。在C语言中，有多种基本数据类型，每种类型在内存中占据不同的空间并具有不同的取值范围。以下是一些常见的C语言数据类型的简介：</p></blockquote><h2 id="2-1-基本数据类型"><a href="#2-1-基本数据类型" class="headerlink" title="2.1 基本数据类型"></a>2.1 基本数据类型</h2><ul><li><strong>整数类型</strong>：用于存储整数值，分为<strong>有符号和无符号</strong>两种。有符号整数可以表示正数、负数和零，而无符号整数只能表示非负数（正数和零）。常见整数类型有：<ul><li><code>int</code>：常规整数，<strong>根据平台占用不同字节</strong>。</li><li><code>short</code>：短整数，占用较少字节。</li><li><code>long</code>：长整数，占用较多字节。</li><li><code>unsigned int</code>、<code>unsigned short</code>、<code>unsigned long</code>：无符号整数。</li></ul></li><li><strong>浮点类型</strong>：用于存储小数或实数值，包括<strong>单精度和双精度</strong>。常见浮点类型有：<ul><li><code>float</code>：单精度浮点数，占用4字节。</li><li><code>double</code>：双精度浮点数，占用8字节。</li></ul></li><li><strong>字符类型</strong>：用于存储<strong>单个字符</strong>，通常使用<code>char</code>数据类型。</li></ul><h2 id="2-2-复合数据类型"><a href="#2-2-复合数据类型" class="headerlink" title="2.2 复合数据类型"></a>2.2 复合数据类型</h2><ul><li><strong>数组</strong>：由相同类型的元素组成的集合，通过<strong>索引访问</strong>。例如：<code>int scores[5];</code> 定义一个包含5个整数的数组。</li><li><strong>联合体（Union）</strong>：类似结构体，但<strong>成员共享相同内存</strong>，只能存储一个成员的值，节省内存。</li><li><strong>结构体</strong>：将不同类型的数据组合成自定义的复合数据类型。例如：</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Student &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> gpa;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-指针类型"><a href="#2-3-指针类型" class="headerlink" title="2.3 指针类型"></a>2.3 指针类型</h2><p><strong>指针</strong>：存储变量内存地址，使你能直接访问内存中的数据。指针类型变量可指向特定数据类型。例如：<code>int *ptr;</code> 定义指向整数的指针。</p><h2 id="2-4-枚举类型"><a href="#2-4-枚举类型" class="headerlink" title="2.4 枚举类型"></a>2.4 枚举类型</h2><p><strong>枚举</strong>：定义用户自定义数据类型，限制变量可能取值范围。例如：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Day &#123;</span><br><span class="line">    MONDAY,</span><br><span class="line">    TUESDAY,</span><br><span class="line">    WEDNESDAY,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>掌握各种数据类型将帮助你更好地管理数据，有效地创建变量，并确保程序正确性和性能。在C语言中，选择适当的数据类型对于正确使用变量、执行算术运算以及在程序中传递参数至关重要。</p></blockquote><h1 id="三、C语言基础"><a href="#三、C语言基础" class="headerlink" title="三、C语言基础"></a>三、C语言基础</h1><h2 id="3-1-变量和常量"><a href="#3-1-变量和常量" class="headerlink" title="3.1 变量和常量"></a>3.1 变量和常量</h2><ul><li><strong>变量</strong>：在程序中用于存储数据的容器，需要声明并指定其数据类型。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br></pre></td></tr></table></figure><ul><li><strong>常量</strong>：值不可更改的变量，在声明时必须初始化，可以使用<code>const</code>关键字来声明常量。 </li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="type">double</span> pi = <span class="number">3.14159</span>;</span><br></pre></td></tr></table></figure><h2 id="3-2-运算符"><a href="#3-2-运算符" class="headerlink" title="3.2 运算符"></a>3.2 运算符</h2><ul><li><strong>算术运算符</strong>：用于执行基本算术操作，如加法、减法、乘法和除法。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">10</span> + <span class="number">5</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>赋值运算符</strong>：用于给变量赋值，将右边的值赋给左边的变量。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>比较运算符</strong>：用于比较两个值，返回布尔值（真或假）。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>逻辑运算符</strong>：用于组合和操作布尔值，如与、或和非。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-控制流语句"><a href="#3-3-控制流语句" class="headerlink" title="3.3 控制流语句"></a>3.3 控制流语句</h2><ul><li><strong>条件语句（if-else）</strong>：根据条件的真假来执行不同的代码块。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    printf(<span class="string">&quot;Pass\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printf(<span class="string">&quot;Fail\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>循环语句</strong>：重复执行一段代码，有三种主要类型：<code>for</code>、<code>while</code>和<code>do-while</code>。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-注释"><a href="#3-4-注释" class="headerlink" title="3.4 注释"></a>3.4 注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>单行注释用于在一行代码后添加说明。<strong>它从<code>//</code>开始，一直到该行的末尾</strong>。编译器会忽略这些注释，不会将其包含在生成的可执行文件中。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">25</span>;  <span class="comment">// 声明并初始化年龄变量</span></span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释用于跨越多行代码的解释。<strong>它从<code>/\*</code>开始，到<code>\*/</code>结束</strong>。多行注释可以包含多行文本，并且可以用于注释掉一整段代码。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一个多行注释示例。</span></span><br><span class="line"><span class="comment">这段代码用于计算两个整数的和。</span></span><br><span class="line"><span class="comment">int sum = num1 + num2;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="注释的作用"><a href="#注释的作用" class="headerlink" title="注释的作用"></a>注释的作用</h3><blockquote><ul><li><strong>解释代码</strong>：注释可以提供代码的解释和上下文，帮助其他人理解你的代码。这对于团队协作和代码维护非常重要。</li><li><strong>记笔记</strong>：你可以使用注释来记录你的想法、思路以及需要后续处理的问题。这有助于你在以后的开发中快速回顾和处理。</li><li><strong>调试</strong>：在调试时，你可以使用注释来排除一些代码，以确定问题是否出现在特定部分。</li><li><strong>临时更改</strong>：如果你想临时禁用某些代码，你可以使用注释来实现，而无需实际删除这些代码。</li></ul></blockquote><h1 id="四、-函数"><a href="#四、-函数" class="headerlink" title="四、 函数"></a>四、 函数</h1><blockquote><p>函数是C语言中的基本构建块之一，它们允许你将一段代码封装为可重用的模块，并通过调用函数来执行特定任务。使用函数可以使你的代码更加模块化、结构化和易于维护。以下是关于函数的一些重要概念：</p></blockquote><h2 id="4-1-函数的声明和定义"><a href="#4-1-函数的声明和定义" class="headerlink" title="4.1  函数的声明和定义"></a>4.1  函数的声明和定义</h2><blockquote><p>在使用函数之前，需要先声明它。函数声明告诉编译器有一个函数存在，但不提供函数的具体实现。函数定义提供了函数的实际代码。例如：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-函数的参数和返回值"><a href="#4-2-函数的参数和返回值" class="headerlink" title="4.2 函数的参数和返回值"></a>4.2 函数的参数和返回值</h2><blockquote><p>函数可以接受参数，执行特定的操作，然后返回一个值。参数是传递给函数的输入值，而返回值是函数执行后的输出结果。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-函数的调用"><a href="#4-3-函数的调用" class="headerlink" title="4.3 函数的调用"></a>4.3 函数的调用</h2><blockquote><p>通过函数名和传递的参数调用函数。调用函数会执行函数的代码，并将返回值返回给调用处。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> result = square(<span class="number">5</span>); <span class="comment">// 调用square函数，计算5的平方</span></span><br></pre></td></tr></table></figure><h2 id="4-4-主函数（main函数）"><a href="#4-4-主函数（main函数）" class="headerlink" title="4.4 主函数（main函数）"></a>4.4 主函数（main函数）</h2><blockquote><p>每个C程序都必须包含一个名为<code>main</code>的函数。程序从<code>main</code>函数开始执行，当<code>main</code>函数执行完毕时，程序终止。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 主函数的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-内置函数和自定义函数"><a href="#4-5-内置函数和自定义函数" class="headerlink" title="4.5  内置函数和自定义函数"></a>4.5  内置函数和自定义函数</h2><blockquote><p>C语言提供了许多内置函数，如数学函数、字符串处理函数等。此外，你也可以创建自己的函数来执行特定任务。</p></blockquote><h1 id="五、-数组和字符串"><a href="#五、-数组和字符串" class="headerlink" title="五、 数组和字符串"></a>五、 数组和字符串</h1><blockquote><p>在C语言中，数组和字符串是常用的数据结构，用于存储一组相关的数据。数组是相同类型元素的有序集合，而字符串是字符数组的特殊形式。以下是关于数组和字符串的重要内容：</p></blockquote><h2 id="5-1-数组的声明和初始化"><a href="#5-1-数组的声明和初始化" class="headerlink" title="5.1  数组的声明和初始化"></a>5.1  数组的声明和初始化</h2><blockquote><p>数组的声明需要指定元素的数据类型和元素数量。可以通过下标（索引）访问数组中的元素。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cCopy codeint scores[<span class="number">5</span>]; <span class="comment">// 声明一个包含5个整数的数组</span></span><br><span class="line">scores[<span class="number">0</span>] = <span class="number">85</span>; <span class="comment">// 为数组元素赋值</span></span><br></pre></td></tr></table></figure><p>也可以在声明时进行初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cCopy code</span><br><span class="line"><span class="type">int</span> numbers[<span class="number">3</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;; <span class="comment">// 声明并初始化一个包含3个整数的数组</span></span><br></pre></td></tr></table></figure><h2 id="5-2-多维数组"><a href="#5-2-多维数组" class="headerlink" title="5.2 多维数组"></a>5.2 多维数组</h2><blockquote><p>多维数组是数组的扩展，可以是二维、三维或更多维度的数组。它们通常用于表示矩阵、表格等数据结构。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cCopy codeint matrix[<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-3-字符串"><a href="#5-3-字符串" class="headerlink" title="5.3 字符串"></a>5.3 字符串</h2><blockquote><p>字符串是字符的数组，以null终止字符（’\0’）作为字符串的结尾。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cCopy code</span><br><span class="line"><span class="type">char</span> greeting[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="5-4-字符串处理函数"><a href="#5-4-字符串处理函数" class="headerlink" title="5.4 字符串处理函数"></a>5.4 字符串处理函数</h2><blockquote><p>C语言提供了许多字符串处理函数，用于处理字符串的操作，如连接、比较、复制等。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> source[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> destination[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(destination, source); <span class="comment">// 复制source到destination</span></span><br></pre></td></tr></table></figure><h2 id="5-5-字符串输入和输出"><a href="#5-5-字符串输入和输出" class="headerlink" title="5.5  字符串输入和输出"></a>5.5  字符串输入和输出</h2><blockquote><p>使用<code>scanf</code>函数从用户输入中读取字符串，使用<code>printf</code>函数将字符串输出到控制台。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cCopy codechar name[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你的名字：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你好，%s！\n&quot;</span>, name);</span><br></pre></td></tr></table></figure><p>数组和字符串是C语言中用于存储和操作数据的重要工具。它们在各种编程场景中都得到广泛应用，从简单的存储数据到处理复杂的文本信息。理解数组和字符串的特性和使用方法将有助于你更高效地编写程序。</p><h1 id="六、-指针和内存管理"><a href="#六、-指针和内存管理" class="headerlink" title="六、 指针和内存管理"></a>六、 指针和内存管理</h1><blockquote><p>在C语言中，指针是一个重要的概念，它允许你直接访问内存中的数据，并提供了更高级的内存管理能力。以下是关于指针和内存管理的重要内容：</p></blockquote><h2 id="6-1-指针的概念"><a href="#6-1-指针的概念" class="headerlink" title="6.1 指针的概念"></a>6.1 指针的概念</h2><blockquote><p>指针是存储内存地址的变量。通过指针，你可以直接访问存储在内存中的数据。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cCopy codeint num = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *ptr;       <span class="comment">// 定义一个指向整数的指针</span></span><br><span class="line">ptr = &amp;num;     <span class="comment">// 将指针指向num的地址</span></span><br></pre></td></tr></table></figure><h2 id="6-2-指针的运算"><a href="#6-2-指针的运算" class="headerlink" title="6.2 指针的运算"></a>6.2 指针的运算</h2><blockquote><p>指针可以进行加法和减法运算，以访问相邻内存单元的数据。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cCopy codeint numbers[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">int</span> *ptr = numbers; <span class="comment">// 将指针指向数组的第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> thirdValue = *(ptr + <span class="number">2</span>); <span class="comment">// 访问数组的第三个元素，即30</span></span><br></pre></td></tr></table></figure><h4 id="6-3-动态内存分配"><a href="#6-3-动态内存分配" class="headerlink" title="6.3 动态内存分配"></a>6.3 动态内存分配</h4><blockquote><p>C语言允许你在运行时动态分配内存，这样你可以根据需要分配和释放内存。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cCopy codeint *dynamicArray = <span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">// 分配一个包含5个整数的动态数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用dynamicArray</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(dynamicArray); <span class="comment">// 释放分配的内存</span></span><br></pre></td></tr></table></figure><h4 id="6-4-指针和数组的关系"><a href="#6-4-指针和数组的关系" class="headerlink" title="6.4 指针和数组的关系"></a>6.4 指针和数组的关系</h4><blockquote><p>数组名实际上是指向数组第一个元素的指针。因此，可以使用指针来访问数组元素。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cCopy codeint numbers[<span class="number">3</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="type">int</span> *ptr = numbers;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> firstValue = *ptr; <span class="comment">// 数组的第一个元素，即10</span></span><br><span class="line"><span class="type">int</span> secondValue = *(ptr + <span class="number">1</span>); <span class="comment">// 数组的第二个元素，即20</span></span><br></pre></td></tr></table></figure><p><strong>指针和内存管理是C语言的核心概念之一</strong>，了解它们将帮助你更好地理解内存的工作方式，提高代码的灵活性，并避免内存泄漏等问题。指针的使用虽然强大，但也需要小心谨慎，以避免出现错误。</p><h1 id="七、文件操作和输入-输出"><a href="#七、文件操作和输入-输出" class="headerlink" title="七、文件操作和输入/输出"></a>七、文件操作和输入/输出</h1><blockquote><p>在C语言中，文件操作和输入/输出（I/O）是处理外部数据的关键部分。通过文件操作，你可以读取和写入文件，而输入/输出允许你与用户交互并处理文本。</p></blockquote><h2 id="7-1-文件操作"><a href="#7-1-文件操作" class="headerlink" title="7.1 文件操作"></a>7.1 文件操作</h2><blockquote><p>C语言中的文件操作涉及打开、读取、写入和关闭文件。你可以使用标准库函数来执行这些操作。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *filePointer;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    filePointer = fopen(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">// 打开文件以读取数据</span></span><br><span class="line">    <span class="keyword">if</span> (filePointer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fgets(data, <span class="number">100</span>, filePointer); <span class="comment">// 从文件读取一行数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">    fclose(filePointer); <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-格式化输入-输出"><a href="#7-2-格式化输入-输出" class="headerlink" title="7.2 格式化输入/输出"></a>7.2 格式化输入/输出</h2><blockquote><p>使用<code>printf</code>和<code>scanf</code>函数，你可以格式化地输出数据到屏幕和从用户处输入数据。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你的年龄是：%d\n&quot;</span>, age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-标准输入-输出"><a href="#7-3-标准输入-输出" class="headerlink" title="7.3 标准输入/输出"></a>7.3 标准输入/输出</h2><blockquote><p>C语言中有三个标准的I/O流：<code>stdin</code>（标准输入）、<code>stdout</code>（标准输出）和<code>stderr</code>（标准错误输出）。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;这是标准输出\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;这是标准错误输出\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件操作和输入/输出是C语言中处理外部数据的重要组成部分。它们使你能够读取和写入文件，与用户交互，并将程序的结果输出到屏幕上。掌握文件操作和I/O将使你能够创建更丰富的应用程序，能够与外部数据进行有效交互。</p><h1 id="八、错误处理和调试"><a href="#八、错误处理和调试" class="headerlink" title="八、错误处理和调试"></a>八、错误处理和调试</h1><blockquote><p>在编程过程中，错误是不可避免的。C语言提供了一些机制来处理错误并进行调试，以确保程序的正确性和稳定性。</p></blockquote><h2 id="8-1-错误代码"><a href="#8-1-错误代码" class="headerlink" title="8.1  错误代码"></a>8.1  错误代码</h2><blockquote><p>C语言中，通常使用返回值来指示函数是否执行成功，以及在错误发生时提供额外的信息。标准库函数通常会返回特定的错误代码。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *filePointer;</span><br><span class="line">    filePointer = fopen(<span class="string">&quot;nonexistent_file.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (filePointer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;无法打开文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(filePointer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-断言"><a href="#8-2-断言" class="headerlink" title="8.2 断言"></a>8.2 断言</h2><blockquote><p>断言是在代码中添加的条件检查，用于确保程序在满足某些条件时继续执行。如果断言条件不满足，程序将中止并显示错误消息。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    assert(x &gt; <span class="number">10</span>); <span class="comment">// 如果x不大于10，程序将中止</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-调试器"><a href="#8-3-调试器" class="headerlink" title="8.3 调试器"></a>8.3 调试器</h2><blockquote><p>调试器是一种工具，用于追踪程序的执行过程并检查变量的值。在C语言中，你可以使用调试器来识别和修复错误。</p></blockquote><h2 id="8-4-日志和打印调试信息"><a href="#8-4-日志和打印调试信息" class="headerlink" title="8.4 日志和打印调试信息"></a>8.4 日志和打印调试信息</h2><blockquote><p>在程序中添加打印语句或日志，可以帮助你追踪程序的执行，以及查找问题所在。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cCopy code<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">42</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x的值：%d\n&quot;</span>, x); <span class="comment">// 打印调试信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误处理和调试是开发过程中必不可少的一部分。通过使用适当的错误处理机制和调试工具，你可以更轻松地识别和解决问题，确保程序的正确性和稳定性。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>通过这篇博客，我们深入了解了C语言的基础知识。从数据类型和变量到控制流语句，再到函数、数组、指针，以及文件操作和调试技巧，我们探索了C语言的核心概念和关键特性。C语言作为一门古老而强大的编程语言，为我们提供了处理底层细节和开发高效程序的工具。</p><blockquote><p>虽然C语言可能对初学者来说有一些挑战，但通过不断的学习、练习和实践，你将逐渐掌握这门语言，并能够编写出高效、健壮的程序。无论是为了系统编程、嵌入式开发、还是学术研究，C语言都是一个极具价值的工具。</p><p>希望这篇博客能够帮助你在C语言的学习之旅中起到一些指引作用。在掌握了这些基础后，你可以继续深入学习更高级的主题，探索更多C语言的应用领域。祝愿你在编程的道路上取得巨大的成功！</p></blockquote><p><strong>如果你有任何问题或需要进一步的帮助，欢迎随时与我交流。继续努力，愿你在编程世界中探索无限可能！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『C语言入门』探索C语言函数</title>
      <link href="/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E6%8E%A2%E7%B4%A2C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/"/>
      <url>/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E6%8E%A2%E7%B4%A2C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><blockquote><p>在现代编程中，函数被视为软件开发的基石，无论是小型脚本还是大型应用程序，都离不开函数的支持。C语言，作为一门广泛使用的编程语言，深刻地体现了<strong>函数在构建可维护、高效和模块化代码方面的重要性</strong>。在本篇博客中，我们将深入探讨C语言函数的各个方面，从基础概念到高级应用，帮助你更好地理解和应用函数。</p></blockquote><h1 id="一、函数概述"><a href="#一、函数概述" class="headerlink" title="一、函数概述"></a>一、函数概述</h1><h2 id="定义与作用"><a href="#定义与作用" class="headerlink" title="定义与作用"></a>定义与作用</h2><blockquote><p>函数是一段封装了特定任务或操作的代码块。它接受输入，执行操作，并可能返回输出。<strong>函数通过将代码逻辑划分为小块，使得问题更易于处理和理解。</strong>这种模块化方法有助于减少代码复杂性，提高代码质量。</p></blockquote><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><ol><li><strong>模块化和可维护性：</strong> 函数允许将复杂任务分解为更小、更易管理的部分。这种模块化方法使得定位和修复问题更加容易，提高了代码的可维护性。</li><li><strong>代码重用：</strong> 编写一次函数，可以在多处地方调用。这消除了重复编写类似代码的需要，节省了时间和工作量。</li><li><strong>可读性：</strong> 函数将任务划分为逻辑块，使得代码逻辑更加清晰。合理的函数命名和抽象层级可以使代码更易于理解。</li><li><strong>团队协作：</strong> 函数使团队成员能够独立地开发和维护不同的功能模块，提高了团队的效率和协作能力。</li></ol><h1 id="二、函数分类"><a href="#二、函数分类" class="headerlink" title="二、函数分类"></a>二、函数分类</h1><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><blockquote><p>库函数是在C语言中预先定义好的函数，它们提供了许多常见任务的实现方法。这就像一个程序员的工具箱，你可以随时拿来使用，而不必从头开始编写代码。</p></blockquote><ul><li><p><strong>输入输出函数 (<code>stdio.h</code>)：</strong></p><ul><li><code>printf</code>：用于在屏幕上输出格式化的信息。</li><li><code>scanf</code>：用于从键盘读取输入，并根据格式化字符串解析输入。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>数学函数 (<code>math.h</code>)：</strong></p><ul><li><code>sqrt</code>：计算给定数字的平方根。</li><li><code>pow</code>：计算一个数字的指数幂。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">double</span> squareRoot = <span class="built_in">sqrt</span>(<span class="number">25.0</span>);</span><br><span class="line">    <span class="type">double</span> power = <span class="built_in">pow</span>(<span class="number">2.0</span>, <span class="number">3.0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串函数 (<code>string.h</code>)：</strong></p><ul><li><code>strlen</code>：计算字符串的长度。</li><li><code>strcpy</code>：将一个字符串复制到另一个字符串。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str2, str1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过使用这些库函数，你可以轻松地执行各种任务，而不必从头编写代码。库函数已经经过<strong>优化和测试</strong>，因此它们可以<strong>提高代码的稳定性和效率。</strong></p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><blockquote><p>自定义函数是你自己编写的、用于完成特定任务的代码块。通过将代码划分为自定义函数，你可以使程序更加模块化和可维护。让我们更详细地了解如何定义、调用和使用自定义函数。</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>自定义函数由程序员根据需要编写，通常包括以下组成部分：</p><blockquote><ul><li><strong>返回类型（Return Type）：</strong> 表示函数返回的数据类型，可以是整数、浮点数、字符等。</li><li><strong>函数名（Function Name）：</strong> 函数的标识符，用于在程序中唯一标识函数。</li><li><strong>参数列表（Parameter List）：</strong> 一组用逗号分隔的参数，用于向函数传递数据。</li><li><strong>函数体（Function Body）：</strong> 包含实际的代码，执行特定的任务。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义函数的定义</span></span><br><span class="line">返回类型 函数名(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="comment">// 执行任务的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>让我们通过一个例子来演示如何定义和使用自定义函数。我们要编写一个函数，计算两个整数的和。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义函数，计算两个整数的和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">5</span>, num2 = <span class="number">3</span></span><br><span class="line">    <span class="type">int</span> result = add(num1, num2);  <span class="comment">// 调用自定义函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum: %d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个示例中，我们首先定义了一个名为 <code>add</code> 的自定义函数。它接受两个整数参数 <code>a</code> 和 <code>b</code>，并在函数体中将它们相加后返回结果。在 <code>main</code> 函数中，我们调用了这个自定义函数，并将 <code>num1</code> 和 <code>num2</code> 作为参数传递给它。最终，我们将结果输出。</p></blockquote><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><blockquote><ul><li><strong>模块化：</strong> 将复杂任务拆分成小块，易于管理和理解。</li><li><strong>重用性：</strong> 编写一次函数，多处调用，避免重复编写代码。</li><li><strong>可读性：</strong> 函数名和功能描述清楚，提高代码可读性。</li><li><strong>维护性：</strong> 修改功能只需在一个地方进行，不影响其他代码。</li></ul></blockquote><h1 id="三、函数参数"><a href="#三、函数参数" class="headerlink" title="三、函数参数"></a>三、函数参数</h1><h2 id="实际参数（实参）"><a href="#实际参数（实参）" class="headerlink" title="实际参数（实参）"></a>实际参数（实参）</h2><blockquote><p>实际参数，也称为实参，是在函数调用时传递给函数的值或变量。它们是函数调用中的真实数据，供函数在执行时使用。实际参数可以是常量、变量、表达式等。</p></blockquote><p>让我们通过一个例子来理解实际参数的概念：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义函数，计算两个数的平均值</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (num1 + num2) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">double</span> a = <span class="number">10.0</span>, b = <span class="number">20.0</span>;</span><br><span class="line">    <span class="type">double</span> result = average(a, b);  <span class="comment">// 传递实际参数 a 和 b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Average: %lf\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>a</code> 和 <code>b</code> 是实际参数，它们被传递给 <code>average</code> 函数，用于计算平均值。</p><h2 id="形式参数（形参）"><a href="#形式参数（形参）" class="headerlink" title="形式参数（形参）"></a>形式参数（形参）</h2><blockquote><p>形式参数，也称为形参，是在函数定义时声明的参数。它们是函数定义的一部分，用于接收调用函数时传递的实际参数。形式参数在函数体内部被当作变量来使用。</p></blockquote><p>让我们通过一个例子来理解形式参数的概念：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义函数，计算两个数的平均值</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;  <span class="comment">// 形式参数 num1 和 num2</span></span><br><span class="line">    <span class="keyword">return</span> (num1 + num2) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">double</span> a = <span class="number">10.0</span>, b = <span class="number">20.0</span>;</span><br><span class="line">    <span class="type">double</span> result = average(a, b);  <span class="comment">// 传递实际参数 a 和 b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Average: %lf\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>num1</code> 和 <code>num2</code> 是形式参数，在函数定义中声明。当函数被调用时，实际参数 <code>a</code> 和 <code>b</code> 会被传递给形式参数。</p><blockquote><p>函数的参数是在函数调用中传递数据的重要方式。<strong>实际参数是函数调用时传递的实际值</strong>，而<strong>形式参数是在函数定义中声明的变量</strong>，用于接收实际参数的值。通过理解参数的作用，你可以更好地控制函数的行为和功能。</p></blockquote><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p><strong>实际参数（实参）的内存分配：</strong></p><blockquote><p>实际参数在函数调用时传递给函数，通常通过值传递的方式。这意味着函数接收到的是实参的值的拷贝，而不是实参本身。这样做可以确保函数调用不会影响实参的原始值。</p></blockquote><p><strong>形式参数（形参）的内存分配：</strong> </p><blockquote><p>形式参数在函数定义中声明，用于接收实际参数的值。它们通常是在函数调用时自动分配的局部变量。当函数被调用时，形式参数的内存会被分配，并且在函数执行结束后会被释放。</p></blockquote><p><strong>注意事项：</strong></p><ol><li><strong>值传递和指针传递：</strong> 在C语言中，参数传递可以通过值传递或指针传递来实现。值传递会复制实参的值，而指针传递会传递实参的内存地址。使用指针传递时，函数可以修改实参的值。</li><li><strong>内存开销：</strong> 在函数调用时，每个实参的拷贝都需要一定的内存开销。如果实参很大，多次函数调用可能会导致内存占用过大。这时可以使用指针传递来减少内存开销。</li><li><strong>内存管理：</strong> 如果函数内部动态分配了内存（如使用 <code>malloc</code> 函数），确保在函数结束后释放这些内存，以避免内存泄漏。</li><li><strong>作用域：</strong> 形式参数的作用域仅限于函数内部。它们不能在函数外部访问。而实际参数的作用域是在函数调用的上下文中。</li><li><strong>返回值传递：</strong> 函数的返回值也是通过值传递的方式传递给调用者。如果返回的是一个复杂类型（如结构体），系统会自动处理其复制。</li></ol><blockquote><p>理解实际参数和形式参数在内存上的处理方式，以及值传递和指针传递的区别，对于正确使用函数参数非常重要。合理管理内存，避免内存泄漏，并了解数据在函数调用过程中的传递方式，将有助于编写更健壮和高效的程序。</p></blockquote><h1 id="四、函数调用"><a href="#四、函数调用" class="headerlink" title="四、函数调用"></a>四、函数调用</h1><p>当我们在程序中调用函数时，参数传递的方式会影响函数如何处理数据。让我们更详细地探讨函数的调用方式，以及它们在内存中的操作，通过实例来进一步理解。</p><h2 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h2><p>传值调用是一种参数传递方式，意味着<strong>在函数调用时，函数会得到实际参数的一个副本</strong>。这样，函数内部的操作<strong>不会影响原始实际参数的值</strong>。让我们看一个交换两个整数值的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swapByValue</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Original values: x = %d, y = %d\n&quot;</span>, x, y);</span><br><span class="line"></span><br><span class="line">    swapByValue(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After swapByValue: x = %d, y = %d\n&quot;</span>, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>swapByValue</code> 函数虽然对 <code>a</code> 和 <code>b</code> 进行了交换，但函数外的 <code>x</code> 和 <code>y</code> 值却没有改变，因为函数得到的是 <code>x</code> 和 <code>y</code> 的复制品。</p><h2 id="传址调用"><a href="#传址调用" class="headerlink" title="传址调用"></a>传址调用</h2><p> 传址调用使用指针传递参数，这意味着<strong>函数获得实际参数的内存地址</strong>。通过操作这些内存地址，<strong>函数可以直接改变实际参数的值</strong>。让我们再次使用交换函数来演示传址调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swapByReference</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Original values: x = %d, y = %d\n&quot;</span>, x, y);</span><br><span class="line"></span><br><span class="line">    swapByReference(&amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After swapByReference: x = %d, y = %d\n&quot;</span>, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们传递了 <code>x</code> 和 <code>y</code> 的地址给 <code>swapByReference</code> 函数。通过操作这些地址，函数成功地实现了 <code>x</code> 和 <code>y</code> 的交换。</p><h1 id="五、函数嵌套调用与链式访问"><a href="#五、函数嵌套调用与链式访问" class="headerlink" title="五、函数嵌套调用与链式访问"></a>五、函数嵌套调用与链式访问</h1><h2 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h2><blockquote><p> 函数的嵌套调用是指在一个函数内部调用另一个函数。通过这种方式，你可以将一个大任务分解为更小的子任务，并将其分配给不同的函数来完成。嵌套调用可以使代码更加模块化和可读。</p></blockquote><p>让我们通过一个例子来理解嵌套调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数A：打印数字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printNumber</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number: %d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数B：调用函数A两次</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">callPrintNumberTwice</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">    printNumber(num1);</span><br><span class="line">    printNumber(num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    callPrintNumberTwice(x, y); <span class="comment">// 嵌套调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>callPrintNumberTwice</code> 函数在内部两次调用了 <code>printNumber</code> 函数，实现了对两个数字的打印。</p><h2 id="链式访问"><a href="#链式访问" class="headerlink" title="链式访问"></a>链式访问</h2><blockquote><p>链式访问是指在一个表达式中连续调用多个函数。这种方式可以使代码更加紧凑和易于理解，特别适用于一系列相关的操作。</p></blockquote><p>让我们通过一个例子来理解链式访问：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数A：返回数字的平方</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数B：返回数字的两倍</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">doubleNumber</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = doubleNumber(square(x)); <span class="comment">// 链式访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result: %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们在一行中调用了 <code>doubleNumber</code> 函数和 <code>square</code> 函数，实现了对数字的平方和两倍的操作。</p><blockquote><p>函数的嵌套调用和链式访问是提高代码模块化和可读性的有效手段。嵌套调用可以将大任务分解为小任务，使代码更加结构化。链式访问可以在一行代码中完成多个操作，使代码更加紧凑。通过理解这些概念，你可以更好地设计和组织你的程序。</p></blockquote><h1 id="六、函数声明与定义"><a href="#六、函数声明与定义" class="headerlink" title="六、函数声明与定义"></a>六、函数声明与定义</h1><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><blockquote><p>函数声明是在使用函数之前告诉编译器函数的存在和怎么使用。它们包括函数的名称、返回类型和参数列表。通过声明，编译器知道如何正确调用这个函数。</p></blockquote><p>让我们看一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> result = add(x, y); <span class="comment">// 使用函数之前进行了声明</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们在 <code>main</code> 函数之前声明了 <code>add</code> 函数。这允许我们在 <code>main</code> 函数中调用它，因为编译器知道 <code>add</code> 函数需要两个整数参数并返回一个整数。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><blockquote><p>函数定义是给函数提供<strong>实际的代码实现</strong>，它告诉编译器函数应该做什么。<strong>定义包括函数的名称、返回类型、参数列表和函数体（代码块）。</strong></p></blockquote><p>再看一次例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> result = add(x, y); <span class="comment">// 使用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 函数的具体代码实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>add</code> 函数的定义包括函数体中的代码，即实际的加法操作。</p><blockquote><p>函数的声明告诉编译器函数的签名，使得在调用函数之前编译器知道函数的存在和参数。函数的定义提供了函数的具体代码实现。通过这两者，我们可以更好地组织和使用函数。正确的声明和定义对于编写易于维护和理解的代码非常重要。</p></blockquote><h1 id="七、递归"><a href="#七、递归" class="headerlink" title="七、递归"></a>七、递归</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>递归是一种编程技术，它指的是一个函数在其自身内部调用自己。换句话说，递归是一种通过重复将问题分解为更小的相似子问题来解决问题的方法。这种方法特别适用于那些可以被分解成相同类型问题的情况。</p></blockquote><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><blockquote><p>递归的核心思想是将一个大问题分解成一个或多个小问题，然后通过递归调用来解决这些小问题。每次递归调用都会缩小问题的规模，直到问题变得足够小，可以通过简单的方法解决，通常称为<strong>“基本情况”</strong>。</p></blockquote><h2 id="满足条件"><a href="#满足条件" class="headerlink" title="满足条件"></a>满足条件</h2><p>递归的实现需要满足两个主要条件：</p><ol><li><strong>基本情况：</strong> 每个递归函数必须有一个或多个基本情况，即不再递归调用而是直接返回结果的情况。这些基本情况是递归的终止条件，防止函数无限递归。</li><li><strong>递归情况：</strong> 除了基本情况，递归函数在解决问题时会调用自身，但是问题规模会减小，以便最终达到基本情况。</li></ol><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><strong>例子：计算阶乘</strong></p><p>阶乘是一个正整数的所有小于等于它的正整数的乘积。</p><blockquote><ol><li><strong>基本情况：</strong> 基本情况是递归的终止条件。在这个例子中，基本情况是当计算阶乘的数为 0 或 1 时，阶乘结果是 1。这是因为 0 的阶乘和 1 的阶乘都是 1。</li><li><strong>递归情况：</strong> 递归情况是指我们如何将问题分解成更小的子问题。在计算阶乘时，我们将问题分解为计算 <code>(n - 1)!</code>，其中 <code>n</code> 是当前数。这是因为 <code>n!</code> 等于 <code>n</code> 乘以 <code>(n - 1)!</code>。我们通过递归调用来解决 <code>(n - 1)!</code> 这个子问题。</li></ol></blockquote><p>让我们用代码来表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归函数计算阶乘</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 基本情况</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>); <span class="comment">// 递归情况</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> result = factorial(num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Factorial of %d is %d\n&quot;</span>, num, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，当我们计算 <code>5!</code> 时，递归会依次计算 <code>4!</code>、<code>3!</code>、<code>2!</code>、<code>1!</code>，直到达到基本情况为止。然后，所有这些部分结果会合并起来得到 <code>5!</code> 的最终结果。</p><p>通过满足基本情况和递归情况，我们能够在递归中解决问题，将问题分解为越来越小的子问题，直到基本情况可以直接返回结果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>本篇博客我们深入探讨了C语言中函数的各个方面，从基本概念到高级应用，帮助你更好地理解和运用函数编程。</p></blockquote><ol><li><strong>函数的基本概念：</strong> 我们从函数是什么开始，它是一个独立的代码块，接受输入并产生输出。函数帮助我们将代码模块化，提高可维护性和重用性。</li><li><strong>C语言中函数的分类：</strong><ul><li><strong>库函数：</strong> 库函数是预先定义好的函数，通过 <code>#include</code> 引入库文件就可以使用。我们详细讨论了库函数的使用和目的。</li><li><strong>自定义函数：</strong> 自定义函数由程序员编写，用于解决特定问题。我们探讨了如何定义和调用自定义函数，并通过例子展示了它们的用法。</li></ul></li><li><strong>函数的参数：</strong> 我们讨论了实际参数和形式参数，以及在函数调用过程中内存上的注意事项。函数参数是传递数据和信息的桥梁，正确的参数使用对于函数的正确运行至关重要。</li><li><strong>函数的调用：</strong> 我们详细介绍了传值调用和传址调用，通过举例说明了它们的不同。理解这些调用方式有助于我们更好地控制函数之间的数据传递和交互。</li><li><strong>函数的嵌套调用和链式访问：</strong> 嵌套调用和链式访问是函数调用的进阶技巧。我们阐述了它们的概念，并通过例子解释了如何在程序中应用它们，提高代码的模块化和紧凑性。</li><li><strong>函数的声明和定义：</strong> 函数的声明和定义是代码组织中的关键。我们解释了函数声明和定义的目的，以及它们如何帮助我们在程序中正确地使用函数。</li><li><strong>函数递归：</strong> 递归是一种强大的编程技巧，通过在函数内部调用自身来解决问题。我们详细讨论了递归的概念、两个必要条件以及与迭代的对比，通过计算阶乘的例子来阐述递归的工作原理。</li></ol><blockquote><p>通过这篇博客，你应该对C语言中函数的各个方面有了更深入的理解。函数是编程的基础，掌握好函数的使用和原理将帮助你编写更加清晰、模块化和高效的代码。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『C语言入门』数组详解</title>
      <link href="/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/09/18/%E3%80%8EC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E3%80%8F%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>数组在C语言编程中扮演着重要角色，它们让我们能够高效地存储和管理数据。本文将带您探索一维数组，学习如何创建、初始化和使用数组，以及它们在计算机内存中的存储方式。让我们深入了解C语言中这个基础而强大的概念。</p></blockquote><h1 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h1><h2 id="1-1-数组的创建"><a href="#1-1-数组的创建" class="headerlink" title="1.1 数组的创建"></a>1.1 数组的创建</h2><p>在C语言中，数组是一种用于存储同类型数据元素的线性数据结构。当创建一个数组时，涉及到以下细节：</p><ul><li><strong>类型和名称：</strong> 首先，你需要确定数组的数据类型（整数、浮点数、字符等）以及为数组命名，这将用于在代码中引用数组。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如，创建一个能容纳5个整数的数组</span></span><br><span class="line"><span class="type">int</span> myArray[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><ul><li><strong>大小的声明：</strong> 通过方括号中的数字来定义数组的大小，这决定了数组可以容纳的元素数量。数组的大小在创建后通常是固定的。</li></ul><h2 id="1-2-数组的初始化"><a href="#1-2-数组的初始化" class="headerlink" title="1.2 数组的初始化"></a>1.2 数组的初始化</h2><p>数组初始化是指在创建数组的同时为数组的每个元素赋予初始值。这里有一些更深入的方面需要考虑：</p><ul><li><strong>显式初始化：</strong> 你可以在创建数组时使用花括号为数组的每个元素提供初始值。这些值按照你提供的顺序分配给数组元素。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并初始化一个整数数组</span></span><br><span class="line"><span class="type">int</span> myArray[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>部分初始化和默认值：</strong> 如果未为数组的所有元素提供初始值，剩余的元素将被自动设置为默认值，例如，整数数组中未初始化的元素将被设置为0。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前三个元素被初始化为1、2、3，剩余的元素自动设为0</span></span><br><span class="line"><span class="type">int</span> myArray[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-一维数组的使用"><a href="#1-3-一维数组的使用" class="headerlink" title="1.3  一维数组的使用"></a>1.3  一维数组的使用</h2><p>了解如何使用数组中的元素以及如何遍历数组对于编程至关重要。这里有更多的细节要考虑：</p><ul><li><strong>通过索引访问：</strong> 数组中的元素通过索引来访问，索引从0开始，表示数组中的第一个元素。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> thirdElement = myArray[<span class="number">2</span>];  <span class="comment">// 获取第三个元素（索引为2）</span></span><br></pre></td></tr></table></figure><ul><li><strong>遍历数组：</strong> 使用循环（如for循环）可以遍历数组中的所有元素，进行操作。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, myArray[i]);  <span class="comment">// 打印数组的所有元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-一维数组在内存中的存储"><a href="#1-4-一维数组在内存中的存储" class="headerlink" title="1.4  一维数组在内存中的存储"></a>1.4  一维数组在内存中的存储</h2><h3 id="1-4-1-内存中的数组布局"><a href="#1-4-1-内存中的数组布局" class="headerlink" title="1.4.1  内存中的数组布局"></a>1.4.1  内存中的数组布局</h3><p>在C语言中，一维数组的元素是按照顺序在内存中连续存储的。这种连续存储的布局有助于高效的内存访问，同时也决定了数组元素之间的关系。</p><ul><li><strong>数据类型的大小：</strong> 在理解内存布局之前，需要知道数组元素的数据类型的大小，例如，int类型通常是4字节。</li></ul><h3 id="1-4-2-计算元素的内存地址"><a href="#1-4-2-计算元素的内存地址" class="headerlink" title="1.4.2  计算元素的内存地址"></a>1.4.2  计算元素的内存地址</h3><p>了解如何计算数组元素的内存地址对于深入理解内存布局至关重要。数组的内存地址可以通过数组的起始地址加上索引乘以每个元素的大小来计算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设myArray在内存中的起始地址是1000</span></span><br><span class="line"><span class="comment">// 每个整数占用4个字节</span></span><br><span class="line"><span class="comment">// 计算第三个元素（索引为2）的内存地址</span></span><br><span class="line"><span class="type">int</span> thirdElementAddress = &amp;myArray[<span class="number">2</span>];  <span class="comment">// 1000 + 2 * 4 = 1008</span></span><br></pre></td></tr></table></figure><h3 id="1-4-3-内存中的数组可视化"><a href="#1-4-3-内存中的数组可视化" class="headerlink" title="1.4.3  内存中的数组可视化"></a>1.4.3  内存中的数组可视化</h3><p>想象一下，你有一个整数数组<code>myArray</code>，包含5个元素。在内存中，它可能像这样布局：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内存地址    元素值 (每个元素占<span class="number">4</span>字节)</span><br><span class="line"><span class="number">1000</span>       <span class="selector-attr">[0]</span></span><br><span class="line"><span class="number">1004</span>       <span class="selector-attr">[1]</span></span><br><span class="line"><span class="number">1008</span>       <span class="selector-attr">[2]</span></span><br><span class="line"><span class="number">1012</span>       <span class="selector-attr">[3]</span></span><br><span class="line"><span class="number">1016</span>       <span class="selector-attr">[4]</span></span><br></pre></td></tr></table></figure><p>从上面的布局中可以看出，第一个元素位于起始地址1000，而每个元素都相对于前一个元素的地址增加了4个字节。这就是数组连续存储的本质。</p><h3 id="1-4-4-指针与数组的关系"><a href="#1-4-4-指针与数组的关系" class="headerlink" title="1.4.4 指针与数组的关系"></a>1.4.4 指针与数组的关系</h3><p>指针在理解数组的内存存储中起着重要作用。数组名本身就是一个指向数组起始位置的指针，可以用于访问数组中的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptr = myArray;  <span class="comment">// ptr指向数组的起始位置</span></span><br><span class="line"><span class="type">int</span> thirdElement = *(ptr + <span class="number">2</span>);  <span class="comment">// 通过指针访问第三个元素的值</span></span><br></pre></td></tr></table></figure><h3 id="1-5-5-内存布局的影响"><a href="#1-5-5-内存布局的影响" class="headerlink" title="1.5.5  内存布局的影响"></a>1.5.5  内存布局的影响</h3><blockquote><p>了解数组的内存布局对于编程至关重要，因为它影响了程序的性能。连续的内存布局允许CPU高效地预取和缓存数组元素，从而提高访问速度。</p></blockquote><h1 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h1><h2 id="2-1-二维数组的创建"><a href="#2-1-二维数组的创建" class="headerlink" title="2.1 二维数组的创建"></a>2.1 二维数组的创建</h2><blockquote><p>二维数组是一种表格状的数据结构，可以将其视为行和列的组合。在C语言中，创建二维数组包括指定数组的类型和名称，以及行数和列数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个3行4列的整数类型的二维数组</span></span><br><span class="line"><span class="type">int</span> myArray[<span class="number">3</span>][<span class="number">4</span>];  <span class="comment">// 声明一个名为myArray的3行4列整数二维数组</span></span><br></pre></td></tr></table></figure><h2 id="2-2-二维数组的初始化"><a href="#2-2-二维数组的初始化" class="headerlink" title="2.2 二维数组的初始化"></a>2.2 二维数组的初始化</h2><blockquote><p>初始化二维数组是在创建数组的同时为每个元素赋予初始值。这可能需要更多的关注，尤其是在初始化多维数组时。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并初始化一个3行4列的整数二维数组</span></span><br><span class="line"><span class="type">int</span> myArray[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,   <span class="comment">// 第一行的元素</span></span><br><span class="line">    &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,   <span class="comment">// 第二行的元素</span></span><br><span class="line">    &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125; <span class="comment">// 第三行的元素</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-二维数组的使用"><a href="#2-3-二维数组的使用" class="headerlink" title="2.3 二维数组的使用"></a>2.3 二维数组的使用</h2><blockquote><p>使用二维数组涉及到通过行索引和列索引来访问元素。这些索引从0开始，表示数组中的第一个行或列。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = myArray[<span class="number">1</span>][<span class="number">2</span>];  <span class="comment">// 获取第二行、第三列的元素值（行索引为1，列索引为2）</span></span><br></pre></td></tr></table></figure><p>你可以使用嵌套循环来遍历整个二维数组，进行操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, myArray[i][j]);  <span class="comment">// 打印整个二维数组的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">// 换行以区分行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-二维数组在内存中的存储"><a href="#2-4-二维数组在内存中的存储" class="headerlink" title="2.4 二维数组在内存中的存储"></a>2.4 二维数组在内存中的存储</h2><blockquote><p>深入了解二维数组在内存中的存储方式有助于更好地理解其索引和访问方式。</p></blockquote><ul><li><strong>连续存储：</strong> 在内存中，二维数组的元素实际上是以一维数组的形式连续存储的，每一行的元素排列在一起，行与行之间相邻。</li><li><strong>内存地址计算：</strong> 计算二维数组中元素的内存地址需要使用起始地址、行索引、列数以及每个元素的大小。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设myArray在内存中的起始地址是2000</span></span><br><span class="line"><span class="comment">// 每个整数占用4个字节</span></span><br><span class="line"><span class="comment">// 计算第二行第三列（行索引为1，列索引为2）的内存地址</span></span><br><span class="line"><span class="type">int</span> elementAddress = &amp;myArray[<span class="number">1</span>][<span class="number">2</span>];  <span class="comment">// 2000 + 1 * 4 * 4 + 2 * 4 = 2024</span></span><br></pre></td></tr></table></figure><p>这样的存储方式允许C语言模拟实现了二维数组的访问。</p><h1 id="三、数组越界"><a href="#三、数组越界" class="headerlink" title="三、数组越界"></a>三、数组越界</h1><h2 id="3-1-数组越界的问题和风险"><a href="#3-1-数组越界的问题和风险" class="headerlink" title="3.1 数组越界的问题和风险"></a>3.1 数组越界的问题和风险</h2><p>数组越界是指试图访问数组之外的元素，这可能会导致以下问题和风险：</p><blockquote><ol><li><strong>未定义行为（Undefined Behavior）：</strong> C语言标准中未定义了数组越界的行为。这意味着当你访问超出数组范围的元素时，编译器不会为此提供任何保证，程序可能会表现出无法预测的结果，包括崩溃、输出错误的值，甚至在不同情况下可能有不同的行为。</li><li><strong>内存损坏：</strong> 越界访问可能会影响到数组元素以外的内存区域。这可能会导致内存损坏，导致数据的意外改变，影响到其他变量或程序的执行。</li><li><strong>安全漏洞：</strong> 数组越界访问是缓冲区溢出等安全漏洞的常见原因之一。攻击者可能会通过越界访问来修改其他关键变量的值，执行恶意代码，甚至窃取敏感数据。</li></ol></blockquote><h2 id="3-2-避免数组越界"><a href="#3-2-避免数组越界" class="headerlink" title="3.2 避免数组越界"></a>3.2 避免数组越界</h2><p>为了避免数组越界，有一些实用的方法和最佳实践：</p><ol><li><strong>检查索引范围：</strong> 在访问数组元素之前，始终检查索引是否在合法的范围内。可以使用条件语句来验证索引的有效性。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; arrayLength) &#123;</span><br><span class="line">    <span class="comment">// 执行数组元素访问操作</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理越界情况，如报错或返回错误码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>使用循环：</strong> 在使用循环遍历数组时，确保循环的索引在合法范围内。循环条件应考虑数组长度。</li><li><strong>注意多维数组：</strong> 对于多维数组，确保每个维度的索引都在有效范围内。例如，对于 <code>int myArray[3][4];</code>，确保行索引在0到2之间，列索引在0到3之间。</li><li><strong>使用<code>sizeof</code>：</strong> 在使用数组时，可以使用 <code>sizeof</code> 运算符来获取数组的大小，以便进行索引的合法性检查。</li></ol><h1 id="四、数组作为函数参数"><a href="#四、数组作为函数参数" class="headerlink" title="四、数组作为函数参数"></a>四、数组作为函数参数</h1><blockquote><p>当数组作为函数参数传递时，数组名是一个指向数组首元素内存地址的常量指针。数组名实际上被解释为指向数组首元素的指针，这使得函数能够访问整个数组。</p></blockquote><p>让我们更详细地解释：</p><h2 id="4-1-数组名是指向首元素的指针"><a href="#4-1-数组名是指向首元素的指针" class="headerlink" title="4.1 数组名是指向首元素的指针"></a>4.1 数组名是指向首元素的指针</h2><blockquote><p>在C语言中，数组名是一个指向数组首元素的<strong>常量指针</strong>。这意味着数组名实际上是首元素的内存地址。当你将数组作为函数参数传递时，函数会接收数组名，并将其视为指向数组首元素的指针。</p></blockquote><p>考虑以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里，arr 是一个指向数组首元素的指针</span></span><br><span class="line">    <span class="comment">// 它与 &amp;arr[0] 是等价的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);  <span class="comment">// 通过指针运算访问数组元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> myArray[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    printArray(myArray, <span class="number">5</span>);  <span class="comment">// 传递数组名和数组大小</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，当我们传递 <code>myArray</code> 到 <code>printArray</code> 函数时，<code>arr</code> 在函数内部实际上被视为指向 <code>myArray</code> 首元素的指针。因此，通过 <code>arr[i]</code> 的方式可以访问数组元素。</p><h2 id="4-2-数组名在函数参数中的特性"><a href="#4-2-数组名在函数参数中的特性" class="headerlink" title="4.2 数组名在函数参数中的特性"></a>4.2 数组名在函数参数中的特性</h2><p>当数组名作为函数参数传递时，有一些关键特性需要注意：</p><ul><li>数组名会退化为指向首元素的指针。在函数参数声明中，<code>int arr[]</code> 实际上被理解为 <code>int *arr</code>，因此 <code>arr</code> 是一个指针。</li><li>由于传递的是指针，函数内部无法直接获取传递的数组大小。通常需要将数组大小作为额外的参数传递给函数，以避免越界访问。</li></ul><h2 id="4-3-避免数组越界"><a href="#4-3-避免数组越界" class="headerlink" title="4.3 避免数组越界"></a>4.3 避免数组越界</h2><blockquote><p>在函数参数中传递数组时，必须特别注意数组越界问题。由于函数无法获取传递数组的确切大小，因此在函数内部应使用传递的数组大小来避免越界访问。</p></blockquote><h2 id="4-4-数组名与指针的差异"><a href="#4-4-数组名与指针的差异" class="headerlink" title="4.4 数组名与指针的差异"></a>4.4 数组名与指针的差异</h2><p>尽管数组名在函数参数中退化为指针，但数组名和指针之间仍然存在一些差异：</p><ul><li>数组名是常量指针，一旦指向某个内存地址，就无法再指向其他地方。而指针变量可以重新赋值为其他内存地址。</li><li>数组名可以使用 <code>sizeof</code> 运算符来获取整个数组的大小，而指针只能获取指针本身的大小。</li></ul><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><blockquote><p>通过本文的探讨，我们深入了解了在C语言中创建、初始化和使用一维数组的过程，同时还探讨了二维数组的相关内容。此外，我们还研究了数组越界问题以及如何将数组作为函数参数传递。以下是我们从这篇文章中所获得的关键信息：</p></blockquote><h2 id="5-1-一维数组的重要性和使用"><a href="#5-1-一维数组的重要性和使用" class="headerlink" title="5.1 一维数组的重要性和使用"></a>5.1 一维数组的重要性和使用</h2><blockquote><ul><li>一维数组是C语言中的重要数据结构，用于有效地存储和管理一系列相同类型的数据。</li><li>创建数组时，我们需要指定数据类型、数组名称和大小。</li><li>数组可以通过显式初始化来设置初始值，也可以部分初始化，未初始化的元素会被设为默认值。</li><li>数组中的元素可以通过索引进行访问，索引从0开始，通过循环遍历数组可以实现对每个元素的操作。</li><li>数组在内存中是连续存储的，可以通过内存地址计算和指针来访问元素。</li></ul></blockquote><h2 id="5-2-二维数组的构建和使用"><a href="#5-2-二维数组的构建和使用" class="headerlink" title="5.2 二维数组的构建和使用"></a>5.2 二维数组的构建和使用</h2><blockquote><ul><li>二维数组是表格状的数据结构，适用于需要表示行和列关系的情况。</li><li>创建二维数组时，除了数据类型和名称，还需要确定行数和列数。</li><li>通过提供初始化值来初始化二维数组，每个元素通过行索引和列索引定位。</li><li>二维数组的访问也是通过双重索引实现的，行和列索引都从0开始。</li></ul></blockquote><h2 id="5-3-避免数组越界问题"><a href="#5-3-避免数组越界问题" class="headerlink" title="5.3 避免数组越界问题"></a>5.3 避免数组越界问题</h2><blockquote><ul><li>数组越界指试图访问数组范围之外的元素，可能导致未定义行为、内存损坏和安全漏洞。</li><li>可以通过检查索引范围、使用循环时确保索引在有效范围内，以及使用<code>sizeof</code>运算符来避免数组越界问题。</li></ul></blockquote><h2 id="5-4-数组作为函数参数的特性"><a href="#5-4-数组作为函数参数的特性" class="headerlink" title="5.4 数组作为函数参数的特性"></a>5.4 数组作为函数参数的特性</h2><blockquote><ul><li>数组名作为函数参数时，实际上是传递了一个指向数组首元素的常量指针。</li><li>在函数参数中，数组名退化为指针，无法直接获取数组大小，需要通过额外参数传递。</li><li>了解数组名在函数参数中的特性有助于正确处理数组的大小和越界问题。</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
